# tools/sync_plugins_deps_async.py
import os
import sys
import pkgutil
import importlib
from pathlib import Path

try:
    from pkg_resources import get_distribution, DistributionNotFound
except ImportError:
    get_distribution = None

# Ensure project root is in sys.path
sys.path.append(str(Path(__file__).resolve().parent.parent))

import plugins  # your plugins folder

OUTPUT_FILE = Path(__file__).resolve().parent / "requirements_plugins.txt"
PROJECT_MODULES = {"app", "plugins"}

# Standard library modules to skip
import sysconfig
STDLIB_PATH = sysconfig.get_paths()["stdlib"]
import builtins
BUILTINS = set(dir(builtins))

def is_external_package(name: str) -> bool:
    """Return True if likely a pip-installable external package."""
    if name in PROJECT_MODULES or name in BUILTINS:
        return False
    try:
        mod = importlib.import_module(name)
        if hasattr(mod, "__file__"):
            # Skip if module is in stdlib
            if mod.__file__ and mod.__file__.startswith(STDLIB_PATH):
                return False
        return True
    except Exception:
        return True  # assume external if import fails

def check_installed_version(pkg: str):
    if get_distribution is None:
        return None
    try:
        return get_distribution(pkg).version
    except Exception:
        return None

def scan_plugin(plugin_name: str):
    missing_packages = set()
    try:
        plugin = importlib.import_module(plugin_name)
    except Exception:
        return missing_packages

    for attr_name in dir(plugin):
        attr = getattr(plugin, attr_name)
        if hasattr(attr, "__module__"):
            mod_name = attr.__module__.split(".")[0]
            if is_external_package(mod_name) and not check_installed_version(mod_name):
                missing_packages.add(mod_name)
    return missing_packages

def main():
    all_missing = set()
    print("üîé Scanning plugins for dependencies (sync + async)...")
    for _, name, _ in pkgutil.iter_modules(plugins.__path__, plugins.__name__ + "."):
        deps = scan_plugin(name)
        for pkg in deps:
            print(f"‚ö†Ô∏è  {pkg} not installed.")
        all_missing.update(deps)

    # Write requirements
    with open(OUTPUT_FILE, "w") as f:
        for pkg in sorted(all_missing):
            f.write(pkg + "\n")

    print("\n‚úÖ requirements_plugins.txt generated.")
    if not all_missing:
        print("No missing external packages detected.")

if __name__ == "__main__":
    main()
